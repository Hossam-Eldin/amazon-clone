var flags;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                      Handshake                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function createHandshakeResponse(packet, info, connection, auth_plugin)
{
	if (connection.capabilities.CLIENT_PROTOCOL_41)
		return createHandshakeResponse41(packet, info, connection, auth_plugin);
	else
		return createHandshakeResponse320(packet, info, connection, auth_plugin);
}

function createHandshakeResponse41(packet, info, connection, auth_plugin)
{
	packet.putInt(flags.createCapabilities(connection.capabilities), 4);
	packet.putInt(connection.max_packet_size, 4);
	packet.put(connection.character_set);
	packet.put(new Array(23));
	
	if (connection.capabilities.CLIENT_SSL)
	{
		//TODO switch to SSL
		//return;
	}
	
	packet.putStringN(info.user);
	
	if (connection.capabilities.CLIENT_SECURE_CONNECTION)
	{
		if (connection.capabilities.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA)
		{
			packet.putIntV(auth_plugin.data.length);
			packet.putBytes(auth_plugin.data);
		} else
		{
			//TODO auth_response cannot be longer than 255 characters!
			packet.put(auth_plugin.data.length);
			packet.putBytes(auth_plugin.data);
		}
	} else
	{
		//TODO wtf? plaintext password?
		//packet.putBytes(auth_plugin.data);
		//packet.put(0x00);
		//packet.putStringN(auth_plugin.data.toString('hex'));
	}
	
	if (connection.capabilities.CLIENT_CONNECT_WITH_DB)
		packet.putStringN(info.database);
	
	if (connection.capabilities.CLIENT_PLUGIN_AUTH)
		packet.putStringN(auth_plugin.name);
	
	if (connection.capabilities.CLIENT_CONNECT_ATTRS)
	{
		//TODO!!!
		//packet.putIntV(byte length of all attrs);
		//for (var i = 0; i < attrs.length; i++)
		//{
		//	packet.putIntV(attrs[i].key.length);
		//	packet.putString(attrs[i].key);
		//	packet.putIntV(attrs[i].value.length);
		//	packet.putString(attrs[i].value);
		//}
	}
	
	return packet.pop();
}

function createHandshakeResponse320(packet, info, connection, auth_plugin)
{
	console.log("Outdated server does not support authentication plugins! Cannot connect!");
	return false;
	return {
		status: "Outdated server"
	};
	
	packet.putInt(flags.createCapabilities(connection.capabilities), 2);
	packet.putInt(connection.max_packet_size, 3);
	packet.putStringN(info.user);
	
	packet.pop();
	
	return false;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                       Exports                       *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

module.exports = {
	initialize: function(f)
	{
		flags = f;
		return this;
	},
	createHandshakeResponse: createHandshakeResponse
};
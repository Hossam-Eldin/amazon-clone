exports.createCapabilities = function(settings)
{
	var flags = 0;
	
	if (settings.CLIENT_LONG_PASSWORD)
		flags |= (1 << 0);
	if (settings.CLIENT_FOUND_ROWS)
		flags |= (1 << 1);
	if (settings.CLIENT_LONG_FLAG)
		flags |= (1 << 2);
	if (settings.CLIENT_CONNECT_WITH_DB)
		flags |= (1 << 3);
	if (settings.CLIENT_NO_SCHEMA)
		flags |= (1 << 4);
	if (settings.CLIENT_COMPRESS)
		flags |= (1 << 5);
	if (settings.CLIENT_ODBC)
		flags |= (1 << 6);
	if (settings.CLIENT_LOCAL_FILES)
		flags |= (1 << 7);
	if (settings.CLIENT_IGNORE_SPACE)
		flags |= (1 << 8);
	if (settings.CLIENT_PROTOCOL_41)
		flags |= (1 << 9);
	if (settings.CLIENT_INTERACTIVE)
		flags |= (1 << 10);
	if (settings.CLIENT_SSL)
		flags |= (1 << 11);
	if (settings.CLIENT_IGNORE_SIGPIPE)
		flags |= (1 << 12);
	if (settings.CLIENT_TRANSACTIONS)
		flags |= (1 << 13);
	if (settings.CLIENT_RESERVED)
		flags |= (1 << 14);
	if (settings.CLIENT_SECURE_CONNECTION)
		flags |= (1 << 15);
	if (settings.CLIENT_MULTI_STATEMENTS)
		flags |= (1 << 16);
	if (settings.CLIENT_MULTI_RESULTS)
		flags |= (1 << 17);
	if (settings.CLIENT_PS_MULTI_RESULTS)
		flags |= (1 << 18);
	if (settings.CLIENT_PLUGIN_AUTH)
		flags |= (1 << 19);
	if (settings.CLIENT_CONNECT_ATTRS)
		flags |= (1 << 20);
	if (settings.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA)
		flags |= (1 << 21);
	if (settings.CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS)
		flags |= (1 << 22);
	if (settings.CLIENT_SESSION_TRACK)
		flags |= (1 << 23);
	if (settings.CLIENT_DEPRECATE_EOF)
		flags |= (1 << 24);
	
	return flags;
};

exports.parseCapabilities = function(flags)
{
	return {CLIENT_LONG_PASSWORD: (flags & (1 << 0)) != 0,
		CLIENT_FOUND_ROWS: (flags & (1 << 1)) != 0,
		CLIENT_LONG_FLAG: (flags & (1 << 2)) != 0,
		CLIENT_CONNECT_WITH_DB: (flags & (1 << 3)) != 0,
		CLIENT_NO_SCHEMA: (flags & (1 << 4)) != 0,
		CLIENT_COMPRESS: (flags & (1 << 5)) != 0,
		CLIENT_ODBC: (flags & (1 << 6)) != 0,
		CLIENT_LOCAL_FILES: (flags & (1 << 7)) != 0,
		CLIENT_IGNORE_SPACE: (flags & (1 << 8)) != 0,
		CLIENT_PROTOCOL_41: (flags & (1 << 9)) != 0,
		CLIENT_INTERACTIVE: (flags & (1 << 10)) != 0,
		CLIENT_SSL: (flags & (1 << 11)) != 0,
		CLIENT_IGNORE_SIGPIPE: (flags & (1 << 12)) != 0,
		CLIENT_TRANSACTIONS: (flags & (1 << 13)) != 0,
		CLIENT_RESERVED: (flags & (1 << 14)) != 0,
		CLIENT_SECURE_CONNECTION: (flags & (1 << 15)) != 0,
		CLIENT_MULTI_STATEMENTS: (flags & (1 << 16)) != 0,
		CLIENT_MULTI_RESULTS: (flags & (1 << 17)) != 0,
		CLIENT_PS_MULTI_RESULTS: (flags & (1 << 18)) != 0,
		CLIENT_PLUGIN_AUTH: (flags & (1 << 19)) != 0,
		CLIENT_CONNECT_ATTRS: (flags & (1 << 20)) != 0,
		CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA: (flags & (1 << 21)) != 0,
		CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS: (flags & (1 << 22)) != 0,
		CLIENT_SESSION_TRACK: (flags & (1 << 23)) != 0,
		CLIENT_DEPRECATE_EOF: (flags & (1 << 24)) != 0
	};
};

exports.combineCapabilities = function(c1, c2)
{
	c1.CLIENT_LONG_PASSWORD &= c2.CLIENT_LONG_PASSWORD;
	c1.CLIENT_FOUND_ROWS &= c2.CLIENT_FOUND_ROWS;
	c1.CLIENT_LONG_FLAG &= c2.CLIENT_LONG_FLAG;
	c1.CLIENT_CONNECT_WITH_DB &= c2.CLIENT_CONNECT_WITH_DB;
	c1.CLIENT_NO_SCHEMA &= c2.CLIENT_NO_SCHEMA;
	c1.CLIENT_COMPRESS &= c2.CLIENT_COMPRESS;
	c1.CLIENT_ODBC &= c2.CLIENT_ODBC;
	c1.CLIENT_LOCAL_FILES &= c2.CLIENT_LOCAL_FILES;
	c1.CLIENT_IGNORE_SPACE &= c2.CLIENT_IGNORE_SPACE;
	c1.CLIENT_PROTOCOL_41 &= c2.CLIENT_PROTOCOL_41;
	c1.CLIENT_INTERACTIVE &= c2.CLIENT_INTERACTIVE;
	c1.CLIENT_SSL &= c2.CLIENT_SSL;
	c1.CLIENT_IGNORE_SIGPIPE &= c2.CLIENT_IGNORE_SIGPIPE;
	c1.CLIENT_TRANSACTIONS &= c2.CLIENT_TRANSACTIONS;
	c1.CLIENT_RESERVED &= c2.CLIENT_RESERVED;
	c1.CLIENT_SECURE_CONNECTION &= c2.CLIENT_SECURE_CONNECTION;
	c1.CLIENT_MULTI_STATEMENTS &= c2.CLIENT_MULTI_STATEMENTS;
	c1.CLIENT_MULTI_RESULTS &= c2.CLIENT_MULTI_RESULTS;
	c1.CLIENT_PS_MULTI_RESULTS &= c2.CLIENT_PS_MULTI_RESULTS;
	c1.CLIENT_PLUGIN_AUTH &= c2.CLIENT_PLUGIN_AUTH;
	c1.CLIENT_CONNECT_ATTRS &= c2.CLIENT_CONNECT_ATTRS;
	c1.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA &= c2.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA;
	c1.CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS &= c2.CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS;
	c1.CLIENT_SESSION_TRACK &= c2.CLIENT_SESSION_TRACK;
	c1.CLIENT_DEPRECATE_EOF &= c2.CLIENT_DEPRECATE_EOF;
	
	return c1;
};

exports.parseStatus = function(flags)
{
	return {
		SERVER_STATUS_IN_TRANS: (flags & (1 << 0)) != 0,
		SERVER_STATUS_AUTOCOMMIT: (flags & (1 << 1)) != 0,
		SERVER_MORE_RESULTS_EXISTS: (flags & (1 << 3)) != 0,
		SERVER_STATUS_NO_GOOD_INDEX_USED: (flags & (1 << 4)) != 0,
		SERVER_STATUS_NO_INDEX_USED: (flags & (1 << 5)) != 0,
		SERVER_STATUS_CURSOR_EXISTS: (flags & (1 << 6)) != 0,
		SERVER_STATUS_LAST_ROW_SENT: (flags & (1 << 7)) != 0,
		SERVER_STATUS_DB_DROPPED: (flags & (1 << 8)) != 0,
		SERVER_STATUS_NO_BACKSLASH_ESCAPES: (flags & (1 << 9)) != 0,
		SERVER_STATUS_METADATA_CHANGED: (flags & (1 << 10)) != 0,
		SERVER_QUERY_WAS_SLOW: (flags & (1 << 11)) != 0,
		SERVER_PS_OUT_PARAMS: (flags & (1 << 12)) != 0,
		SERVER_STATUS_IN_TRANS_READONLY: (flags & (1 << 13)) != 0,
		SERVER_SESSION_STATE_CHANGED: (flags & (1 << 14)) != 0
	};
};

exports.createRefresh = function(settings)
{
	var flags = 0;
	
	if (settings.GRANT)		//Refresh grant tables FLUSH PRIVILEGES
		flags |= (1 << 0);
	if (settings.LOG)		//Start on new log file FLUSH LOGS
		flags |= (1 << 1);
	if (settings.TABLES)	//Close all tables FLUSH TABLES
		flags |= (1 << 2);
	if (settings.HOSTS)		//Flush host cache FLUSH HOSTS
		flags |= (1 << 3);
	if (settings.STATUS)	//Flush status variables FLUSH STATUS
		flags |= (1 << 4);
	if (settings.THREADS)	//Flush thread cache
		flags |= (1 << 5);
	if (settings.SLAVE)		//Reset master info and restart slave thread RESET SLAVE
		flags |= (1 << 6);
	if (settings.MASTER)	//Remove all binary logs in the index and truncate the index RESET MASTER
		flags |= (1 << 7);
	
	return flags;
};

exports.SHUTDOWN_TYPES = {
	SHUTDOWN_DEFAULT: 0x00,
	SHUTDOWN_WAIT_CONNECTIONS: 0x01,
	SHUTDOWN_WAIT_TRANSACTIONS: 0x02,
	SHUTDOWN_WAIT_UPDATES: 0x08,
	SHUTDOWN_WAIT_ALL_BUFFERS: 0x10,
	SHUTDOWN_WAIT_CRITICAL_BUFFERS: 0x11,
	KILL_QUERY: 0xfe,
	KILL_CONNECTION: 0xff
};

exports.parseColumnFlags = function(flags)
{
	return {
		NOT_NULL: (flags & (1 << 0)) != 0,
		PRI_KEY: (flags & (1 << 1)) != 0,
		UNIQUE_KEY: (flags & (1 << 2)) != 0,
		MULT_KEY: (flags & (1 << 3)) != 0,
		BLOB: (flags & (1 << 4)) != 0,
		UNSIGNED: (flags & (1 << 5)) != 0,
		ZEROFILL: (flags & (1 << 6)) != 0,
		BINARY: (flags & (1 << 7)) != 0,
		ENUM: (flags & (1 << 8)) != 0,
		AUTO_INCREMENT: (flags & (1 << 9)) != 0,
		TIMESTAMP: (flags & (1 << 10)) != 0,
		SET: (flags & (1 << 11)) != 0,
		NO_DEFAULT_VALUE: (flags & (1 << 12)) != 0,
		PART_KEY: (flags & (1 << 14)) != 0,
		NUM: (flags & (1 << 15)) != 0
	};
};

exports.parseColumnType = function(type)
{
	switch (type)
	{
		case 0x00:
			return "DECIMAL";
		case 0x01:
			return "TINY";
		case 0x02:
			return "SHORT";
		case 0x03:
			return "LONG";
		case 0x04:
			return "FLOAT";
		case 0x05:
			return "DOUBLE";
		case 0x06:
			return "NULL";
		case 0x07:
			return "TIMESTAMP";
		case 0x08:
			return "LONGLONG";
		case 0x09:
			return "INT24";
		case 0x0a:
			return "DATE";
		case 0x0b:
			return "TIME";
		case 0x0c:
			return "DATETIME";
		case 0x0d:
			return "YEAR";
		case 0x0e:
			return "NEWDATE"; //Internal
		case 0x0f:
			return "VARCHAR";
		case 0x10:
			return "BIT";
		case 0x11:
			return "TIMESTAMP2"; //Internal
		case 0x12:
			return "DATETIME2"; //Internal
		case 0x13:
			return "TIME2"; //Internal

		case 0xf6:
			return "NEWDECIMAL";
		case 0xf7:
			return "ENUM";
		case 0xf8:
			return "SET";
		case 0xf9:
			return "TINY_BLOB";
		case 0xfa:
			return "MEDIUM_BLOB";
		case 0xfb:
			return "LONG_BLOB";
		case 0xfc:
			return "BLOB";
		case 0xfd:
			return "VAR_STRING";
		case 0xfe:
			return "STRING";
		case 0xff:
			return "GEOMETRY";

		default:
			return "UNKNOWN";
    }
};

var flags;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                      Handshake                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function readHandshakePacket(packet)
{
	var protocol_version = packet.get();
	if (protocol_version == 0x09)
		return readHandshakePacketV9(packet);
	else if (protocol_version == 0x0a)
		return readHandshakePacketV10(packet);
	
	return protocol_version;
}

function readHandshakePacketV9(packet)
{
	var handshake_info = {
		protocol_version: 0x09,
		server_version: packet.getString(),
		connection_id: packet.getInt(4),
		capabilities: {}, //TODO figure out what capabilities a V9 server has!
		character_set: 8, //TODO figure out default character set!
		status: null,
		auth_plugin: {
			name: "mysql_old_password",
			data: packet.getString()
		},
	};
	return handshake_info;
}

function readHandshakePacketV10(packet)
{
	var handshake_info = {
		protocol_version: 0x0a,
		server_version: packet.getString(),
		connection_id: packet.getInt(4),
		capabilities: null,
		character_set: 8, //TODO figure out default character set!
		status: void(0), //TODO figure out default status!
		auth_plugin: {
			name: "unknown",
			data: packet.getBytesBuffer(8)
		}
	};
	
	packet.skip();
	
	var capabilities = packet.getInt(2);
	
	if (packet.packet_length > 0)
	{
		handshake_info.character_set = packet.get();
		handshake_info.status = flags.parseStatus(packet.getInt(2));
		
		handshake_info.capabilities = flags.parseCapabilities(capabilities | (packet.getInt(2) << 16));
		
		var auth_plugin_data_length = 8;
		
		if (handshake_info.capabilities.CLIENT_PLUGIN_AUTH)
			auth_plugin_data_length = packet.get();
		else
			packet.skip();
		
		packet.skip(10);
		
		if (handshake_info.capabilities.CLIENT_SECURE_CONNECTION)
			handshake_info.auth_plugin.data = Buffer.concat([handshake_info.auth_plugin.data, packet.getBytesBuffer(Math.max(13, auth_plugin_data_length - 8))]);
		
		if (handshake_info.capabilities.CLIENT_PLUGIN_AUTH)
			handshake_info.auth_plugin.name = packet.getString();
		else
			handshake_info.auth_plugin.name = "mysql_native_password";
	} else
	{
		handshake_info.capabilities = flags.parseCapabilities(capabilities);
	}
	
	return handshake_info;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                  Generic responses                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function isOKPacket(connection)
{
	return (connection.decoder.peek() == 0x00 || (connection.capabilities.CLIENT_DEPRECATE_EOF && connection.decoder.peek() == 0xFE)) && connection.decoder.packet_length >= 7;
}

function readOKPacket(connection)
{
	var type = connection.decoder.get();
	
	var ok = {
		type: "OK",
		affected_rows: connection.decoder.getIntV(),
		last_insert_id: connection.decoder.getIntV(),
		warnings: null,
		status: null,
		info: null,
		session_track: null
	};
	
	if (connection.capabilities.CLIENT_PROTOCOL_41)
	{
		ok.status = flags.parseStatus(connection.decoder.getInt(2));
		ok.warnings = connection.decoder.getInt(2);
	} else if (connection.capabilities.CLIENT_TRANSACTIONS)
	{
		ok.status = flags.parseStatus(connection.decoder.getInt(2));
	}
	
	if (connection.capabilities.CLIENT_SESSION_TRACK)
	{
		//TODO this causes an error
		//TODO maybe StringV can also be [] (empty string without a IntV prefix)?
		if (connection.decoder.packet_length > 0)
		{
			ok.info = connection.decoder.getStringV();
			
			if (ok.status.SERVER_SESSION_STATE_CHANGED)
			{
				ok.session_track = [];
				
				var sl = connection.decoder.getIntV();
				var start = connection.decoder.packet_length;
				while ((start - connection.decoder.packet_length) < sl)
				{
					var type = connection.decoder.get();
					
					var length = connection.decoder.getIntV();
					
					if (type == 0) //SESSION_TRACK_SYSTEM_VARIABLES
					{
						var name = connection.decoder.getStringV(); //Name of changed system variable
						var value = connection.decoder.getStringV(); //Value of changed system variable
						ok.session_track.push({type: "SESSION_TRACK_SYSTEM_VARIABLES", name: name, value: value});
					} else if (type == 1) //SESSION_TRACK_SCHEMA
					{
						var name = connection.decoder.getStringV();
						ok.session_track.push({type: "SESSION_TRACK_SCHEMA", name: name});
					} else if (type == 2) //SESSION_TRACK_STATE_CHANGE
					{
						var flag = connection.decoder.getStringV();
						ok.session_track.push({type: "SESSION_TRACK_STATE_CHANGE", name: name});
					} else //TODO figure out what type==3 is
					{
						ok.session_track.push({type: "unknown", id: type, raw: connection.decoder.getBytesBuffer(length)});
					}
				}
			}
		}
	} else
	{
		ok.info = connection.decoder.getString(connection.decoder.packet_length);
	}
	
	return ok;
}

function isEOFPacket(connection)
{
	return connection.decoder.peek() == 0xFE && connection.decoder.packet_length < 9;
}

function readEOFPacket(connection)
{
	var type = connection.decoder.get();
	
	if (connection.capabilities.CLIENT_PROTOCOL_41)
		return {
			type: "EOF",
			warnings: connection.decoder.getInt(2),
			status: flags.parseStatus(connection.decoder.getInt(2))
		};
	else
		return {
			type: "EOF",
			warnings: null,
			status: null
		};
}

function isERRPacket(connection)
{
	if (connection.capabilities.CLIENT_PROTOCOL_41)
		return connection.decoder.peek() == 0xFF && connection.decoder.packet_length >= 9;
	else
		return connection.decoder.peek() == 0xFF && connection.decoder.packet_length >= 3;
}

function readERRPacket(connection)
{
	var type = connection.decoder.get();
	
	var err = {
		type: "ERR",
		error: connection.decoder.getInt(2),
		sql_state: null,
		message: void(0)
	};
	
	if (connection.capabilities.CLIENT_PROTOCOL_41)
	{
		err.sql_state = connection.decoder.getString(6);
	}
	
	//Max error message size: 512
	err.message = connection.decoder.getString(connection.decoder.packet_length);
	
	return err;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                        Data                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function readColumnDefinition(connection, wasCommandFieldList)
{
	if (connection.capabilities.CLIENT_PROTOCOL_41)
		return readColumnDefinition41(connection, wasCommandFieldList);
	else
		return readColumnDefinition320(connection, wasCommandFieldList);
}

function readColumnDefinition41(connection, wasCommandFieldList)
{
	var column_definition = {
		column_definition_version: "4.1",
		catalog: connection.decoder.getStringV(),
		database: connection.decoder.getStringV(),
		table: connection.decoder.getStringV(),
		org_table: connection.decoder.getStringV(),
		name: connection.decoder.getStringV(),
		org_name: connection.decoder.getStringV(),
		fixed_length_field_length: connection.decoder.getIntV(), //Always 0x0c (next 13 bytes)
		character_set: connection.decoder.getInt(2),
		column_length: connection.decoder.getInt(4),
		type: connection.decoder.get(), //TODO better way instead of type_name
		type_id: null,
		flags_raw: connection.decoder.getInt(2),
		flags: null,
		decimals: connection.decoder.get(),
		default_values: null
	};

	column_definition.type_id = column_definition.type;
	column_definition.type = flags.parseColumnType(column_definition.type);
	column_definition.flags = flags.parseColumnFlags(column_definition.flags_raw);
	
	connection.decoder.skip(2);
	
	if (wasCommandFieldList)
		column_definition.default_values = connection.decoder.getBytesBuffer(connection.decoder.getIntV());

	return column_definition;
}

function readColumnDefinition320(connection, wasCommandFieldList)
{
	var column_definition = {
		column_definition_version: "3.20",
		table: connection.decoder.getStringV(),
		name: connection.decoder.getStringV(),
		column_length: connection.decoder.getInt(connection.decoder.getIntV()),
		type: connection.decoder.getInt(connection.decoder.getIntV()), //TODO better way instead of type_name
		type_id: null,
		flags: null,
		decimals: null,
		default_values: null
	};

	column_definition.type_id = column_definition.type;
	column_definition.type = flags.parseColumnType(column_definition.type);
	
	if (connection.capabilities.CLIENT_LONG_FLAG)
	{
		var l = connection.decoder.getIntV();
		column_definition.flags_raw = connection.decoder.getInt(2);
		column_definition.decimals = connection.decoder.get();
	} else
	{
		var l = connection.decoder.get();
		column_definition.type.flags_raw = connection.decoder.get();
		column_definition.type.decimals = connection.decoder.get();
	}

	column_definition.flags = flags.parseColumnFlags(column_definition.flags_raw);
	
	if (wasCommandFieldList)
		column_definition.default_values = connection.decoder.getBytesBuffer(connection.decoder.getIntV());
	
	return column_definition;
}

function readTextResultsetRow(connection, columns)
{
	var row = {};
	
	for (var i = 0; i < columns.length; i++)
	{
		var value;
		if (connection.decoder.peek() == 0xFB)
		{
			value = null;
			connection.decoder.get();
		} else
			value = /*convertStringToValue*/(connection.decoder.getStringV()/*, columns[i].type*/);
		
		/*row[columns[i].org_name] = */row[columns[i].name] = row[i] = value;
	}
	
	return row;
}

function readBinaryResultsetRow(connection, columns)
{
	connection.decoder.get(); //0x00 packet header

	var row = new Array(columns.length);

	var nulls = connection.decoder.getInt(Math.floor((columns.length + 7 + 2) / 8));

	for (var i = 0; i < columns.length; i++)
	{
		var value;
		if (((nulls >> (i + 2)) & 1) == 1)
			value = null;
		else
			value = connection.decoder.getType(columns[i]);

		/*row[columns[i].org_name] = */row[columns[i].name] = row[i] = value;
	}

	return row;
}

function isLocalInfilePacket(connection)
{
	return connection.decoder.peek() == 0xFB;
}

function readLocalInfilePacket(connection)
{
	return connection.decoder.skip().readString(connection.decoder.packet_length);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                 Prepared statements                 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function readPrepareOKPacket(connection)
{
	var com_stmt_prepare_ok = {
		status: connection.decoder.get(),
		id: connection.decoder.getInt(4),
		num_columns: connection.decoder.getInt(2),
		num_params: connection.decoder.getInt(2),
		warning_count: connection.decoder.skip().getInt(2)
	};
	
	return com_stmt_prepare_ok;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                      Utilities                      *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function convertStringToValue(string, type)
{
	switch (type)
	{
		case 0x00: //MYSQL_TYPE_DECIMAL
		case 0x01: //MYSQL_TYPE_TINY
		case 0x02: //MYSQL_TYPE_SHORT
		case 0x03: //MYSQL_TYPE_LONG
		case 0x04: //MYSQL_TYPE_FLOAT
		case 0x05: //MYSQL_TYPE_DOUBLE
		case 0x06: //MYSQL_TYPE_NULL
		case 0x07: //MYSQL_TYPE_TIMESTAMP
		case 0x08: //MYSQL_TYPE_LONGLONG
		case 0x09: //MYSQL_TYPE_INT24
		case 0x0a: //MYSQL_TYPE_DATE
		case 0x0b: //MYSQL_TYPE_TIME
		case 0x0c: //MYSQL_TYPE_DATETIME
		case 0x0d: //MYSQL_TYPE_YEAR
		case 0x0e: //MYSQL_TYPE_NEWDATE Internal
		case 0x0f: //MYSQL_TYPE_VARCHAR
		case 0x10: //MYSQL_TYPE_BIT
		case 0x11: //MYSQL_TYPE_TIMESTAMP2 Internal
		case 0x12: //MYSQL_TYPE_DATETIME2 Internal
		case 0x13: //MYSQL_TYPE_TIME2 Internal

		case 0xf6: //MYSQL_TYPE_NEWDECIMAL
		case 0xf7: //MYSQL_TYPE_ENUM
		case 0xf8: //MYSQL_TYPE_SET
		case 0xf9: //MYSQL_TYPE_TINY_BLOB
		case 0xfa: //MYSQL_TYPE_MEDIUM_BLOB
		case 0xfb: //MYSQL_TYPE_LONG_BLOB
		case 0xfc: //MYSQL_TYPE_BLOB
		case 0xfd: //MYSQL_TYPE_VAR_STRING
		case 0xfe: //MYSQL_TYPE_STRING
		case 0xff: //MYSQL_TYPE_GEOMETRY
	}

	return string;
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                       Exports                       *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

module.exports = {
	initialize: function(f)
	{
		flags = f;
		return this;
	},
	readHandshakePacket: readHandshakePacket,
	isOKPacket: isOKPacket,
	isEOFPacket: isEOFPacket,
	isERRPacket: isERRPacket,
	readOKPacket: readOKPacket,
	readEOFPacket, readEOFPacket,
	readERRPacket: readERRPacket,
	readColumnDefinition: readColumnDefinition,
	readTextResultsetRow: readTextResultsetRow,
	readBinaryResultsetRow: readBinaryResultsetRow,
	readPrepareOKPacket: readPrepareOKPacket,
	isLocalInfilePacket: isLocalInfilePacket,
	readLocalInfilePacket: readLocalInfilePacket
};